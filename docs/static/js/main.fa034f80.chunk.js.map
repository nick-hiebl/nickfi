{"version":3,"sources":["pages/drawdown/index.tsx","pages/homepage/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["nextState","situation","state","mean","income","incomeYield","unitPrice","units","returns","growthRate","Math","exp","sqrt","log","random","cos","PI","nextUnitPrice","endOfYearBalance","cashBalance","needsBeyondCash","requiredIncome","neededToSell","ceil","finalCash","surplus","unitsBought","floor","generateData","canBuyUnits","initialAssets","startingPrice","startingState","states","lastState","length","numYears","currentState","push","defaultConfig","initialData","numberConfig","style","currency","maximumFractionDigits","minimumFractionDigits","DrawdownPage","useState","setUnitPrice","setInitialAssets","expenses","setExpenses","data","setData","useEffect","parseFloat","Container","Typography","variant","TextField","id","label","value","onChange","event","target","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","map","row","index","s","toLocaleString","undefined","HomePage","NavItem","props","to","textDecoration","color","marginLeft","children","App","AppBar","position","Toolbar","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa034f80.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport {\n  Container,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  TextField,\n  Typography,\n} from '@material-ui/core';\n\ninterface Situation {\n  growthRate: number;\n  incomeYield: number;\n  requiredIncome: number;\n  initialAssets: number;\n  startingPrice: number;\n  numYears: number;\n}\n\ninterface State {\n  units: number;\n  unitPrice: number;\n  cashBalance: number;\n  returns: number;\n}\n\nconst normalValue = (mean: number, sigma: number): number => {\n  const mag = sigma * Math.sqrt(-2 * Math.log(Math.random()));\n  return mag * Math.cos(2 * Math.PI * Math.random()) + mean;\n};\n\nconst nextState = (situation: Situation, state: State): State => {\n  const income = situation.incomeYield * state.unitPrice * state.units;\n  const returns = situation.growthRate * Math.exp(normalValue(0, 0.05));\n  const nextUnitPrice = state.unitPrice * returns;\n\n  const endOfYearBalance = state.cashBalance + income;\n\n  const needsBeyondCash = situation.requiredIncome - endOfYearBalance;\n\n  if (needsBeyondCash > 0) {\n    const neededToSell = Math.ceil(needsBeyondCash / nextUnitPrice);\n  \n    const finalCash = endOfYearBalance + neededToSell * nextUnitPrice - situation.requiredIncome;\n  \n    return {\n      units: state.units - neededToSell,\n      unitPrice: nextUnitPrice,\n      cashBalance: finalCash,\n      returns,\n    };\n  }\n\n  const surplus = endOfYearBalance - situation.requiredIncome;\n\n  const unitsBought = Math.floor(surplus / nextUnitPrice);\n\n  return {\n    units: state.units + unitsBought,\n    unitPrice: nextUnitPrice,\n    cashBalance: surplus - unitsBought * nextUnitPrice,\n    returns,\n  };\n};\n\nconst generateData = (situation: Situation): State[] => {\n  const canBuyUnits = Math.floor(situation.initialAssets / situation.startingPrice);\n  const startingState = {\n    units: canBuyUnits,\n    unitPrice: situation.startingPrice,\n    cashBalance: situation.initialAssets - canBuyUnits * situation.startingPrice,\n    returns: 1,\n  };\n\n  const states = [startingState];\n\n  let lastState = startingState;\n\n  while (states.length <= situation.numYears) {\n    const currentState = nextState(situation, lastState);\n\n    states.push(currentState);\n\n    lastState = currentState;\n  }\n\n  return states;\n}\n\nconst defaultConfig = {\n  growthRate: 1.04,\n  incomeYield: 0.02,\n  requiredIncome: 40000,\n  initialAssets: 1000000,\n  startingPrice: 500,\n  numYears: 40,\n};\n\nlet initialData = generateData(defaultConfig);\n\nconst numberConfig = {\n  style: 'currency',\n  currency: 'USD',\n  maximumFractionDigits: 2,\n  minimumFractionDigits: 2,\n};\n\nexport const DrawdownPage = () => {\n  const [unitPrice, setUnitPrice] = useState('500');\n  const [initialAssets, setInitialAssets] = useState('1000000');\n  const [expenses, setExpenses] = useState('40000');\n  const [data, setData] = useState(initialData);\n\n  useEffect(() => {\n    setData(generateData({\n      ...defaultConfig,\n      initialAssets: parseFloat(initialAssets),\n      startingPrice: parseFloat(unitPrice),\n      requiredIncome: parseFloat(expenses),\n    }));\n  }, [expenses, initialAssets, unitPrice]);\n\n  const handlePriceChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setUnitPrice(event.target.value);\n  };\n\n  const handleAssetsChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInitialAssets(event.target.value);\n  };\n\n  const handleExpensesChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setExpenses(event.target.value);\n  };\n\n  return (\n    <Container>\n      <Typography variant=\"h3\">\n        Drawdown simulator\n      </Typography>\n      <TextField id=\"unit-price\" label=\"Starting unit price\" value={unitPrice} onChange={handlePriceChange} />\n      <TextField id=\"initial-assets\" label=\"Initial assets\" value={initialAssets} onChange={handleAssetsChange} />\n      <TextField id=\"annual-expenses\" label=\"Annual expenses\" value={expenses} onChange={handleExpensesChange} />\n      <TableContainer component={Paper}>\n        <Table>\n          <TableHead>\n            <TableRow>\n              <TableCell>Year</TableCell>\n              <TableCell align=\"right\">Returns (%)</TableCell>\n              <TableCell align=\"right\">Number of units</TableCell>\n              <TableCell align=\"right\">Unit price ($)</TableCell>\n              <TableCell align=\"right\">Cash balance ($)</TableCell>\n              <TableCell align=\"right\">Total net worth ($)</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {data.map((row, index) => {\n              const total = row.units * row.unitPrice + row.cashBalance;\n              const s = total.toLocaleString(undefined, numberConfig);\n\n              const returns = (row.returns - 1);\n              return (\n                <TableRow key={index}>\n                  <TableCell align=\"left\">{index}</TableCell>\n                  <TableCell align=\"right\">{returns.toLocaleString(undefined, { ...numberConfig, style: 'percent' })}</TableCell>\n                  <TableCell align=\"right\">{row.units}</TableCell>\n                  <TableCell align=\"right\">{row.unitPrice.toLocaleString(undefined, numberConfig)}</TableCell>\n                  <TableCell align=\"right\">{row.cashBalance.toLocaleString(undefined, numberConfig)}</TableCell>\n                  <TableCell align=\"right\">{s}</TableCell>\n                </TableRow>\n              );\n            })}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </Container>\n  );\n};\n","import React from 'react';\n\nimport { Container, Typography } from '@material-ui/core';\n\nconst HomePage = () => {\n  return (\n    <Container>\n      <Typography variant=\"h3\">Welcome to NickFI</Typography>\n      <p>Hopefully the home of some interesting financial calculators/simulators.</p>\n      <p>\n        Nothing on this site is financial advice or even general advice. This site does not take\n        into account a huge variety of factors in real life, and only attempts to model reality\n        very broadly and non-specifically. Everything is idealistic and simplified, and results\n        of models here are only representative of models on the randomly generated data, not real\n        historical data, and absolutely not future data.\n      </p>\n    </Container>\n  )\n};\n\nexport default HomePage;\n","import React from 'react';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n} from 'react-router-dom';\n\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\n\nimport { DrawdownPage } from './pages/drawdown';\nimport HomePage from './pages/homepage';\n\nconst NavItem = (props: { children: React.ReactChild, to: string }) => {\n  return (\n    <Link to={props.to} style={{ textDecoration: 'none', color: 'white', marginLeft: '20px' }}>\n      <Typography variant=\"button\">\n        {props.children}\n      </Typography>\n    </Link>\n  );\n}\n\nfunction App() {\n  return (\n    <Router>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h5\">\n            Nick FI\n          </Typography>\n          <NavItem to=\"/\">Home</NavItem>\n          <NavItem to=\"/drawdown\">Drawdown</NavItem>\n        </Toolbar>\n      </AppBar>\n      <Switch>\n        <Route path=\"/drawdown\">\n          <DrawdownPage />\n        </Route>\n        <Route path=\"/\">\n          <HomePage />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}